/*==============================================================================

  Program: 3D Slicer

  Copyright (c) Laboratory for Percutaneous Surgery (PerkLab)
  Queen's University, Kingston, ON, Canada. All Rights Reserved.

  See COPYRIGHT.txt
  or http://www.slicer.org/copyright/copyright.txt for details.

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

  This file was originally developed by Csaba Pinter, PerkLab, Queen's University
  and was supported through the Applied Cancer Research Unit program of Cancer Care
  Ontario with funds provided by the Ontario Ministry of Health and Long-Term Care

==============================================================================*/

#ifndef __qSlicerTerminologyItemDelegate_h
#define __qSlicerTerminologyItemDelegate_h

// Qt includes
#include <QStyledItemDelegate>
#include <QModelIndex>

#include "qSlicerTerminologiesModuleWidgetsExport.h"

// \brief Delegate for displaying terminology selector
class Q_SLICER_MODULE_TERMINOLOGIES_WIDGETS_EXPORT qSlicerTerminologyItemDelegate : public QStyledItemDelegate
{
  Q_OBJECT

public:
  Q_PROPERTY(bool useDecorationRole READ useDecorationRole WRITE setUseDecorationRole)

  qSlicerTerminologyItemDelegate(QObject *parent = nullptr);

  enum TerminologyItemDataRole
  {
    /// Serialized terminology entry
    TerminologyRole = Qt::UserRole + 9,
    /// Serialized default terminology entry, which is used to initialize the terminology selector if the segment has no terminology yet
    DefaultTerminologyRole,
    /// Name of the segment (either custom or auto-generated)
    NameRole,
    /// Flag indicating whether the selected name is auto-generated form terminology
    NameAutoGeneratedRole,
    /// Color of the segment. We do not want to show color in the name cell so we need a custom role
    ColorRole,
    /// Flag indicating whether the selected color is the recommended one from the terminology
    /// (or the auto-generated color in absence of a recommended color)
    ColorAutoGeneratedRole,
    /// Auto-generated color that is used if the selected terminology contains no recommended color
    GeneratedColorRole
  };

  QWidget* createEditor(QWidget *parent, const QStyleOptionViewItem &option, const QModelIndex &index) const override;

  void setEditorData(QWidget *editor, const QModelIndex &index) const override;
  void setModelData(QWidget *editor, QAbstractItemModel *model, const QModelIndex &index) const override;

  void updateEditorGeometry(QWidget *editor, const QStyleOptionViewItem &option, const QModelIndex &index) const override;

  /// This method allow setting a callback function that takes a void* argument and returns bool
  void setUseTerminologySelectorCallback(std::function<bool()> callback);

  /// This can be used for asking the user if he wants to switch to using simple name&color selector
  void setUserSetCustomNameOrColorCallback(std::function<bool()> callback);

  bool useDecorationRole();

public slots:
  void setUseDecorationRole(bool useDecorationRole);

protected slots:
  void commitSenderData();
  void commitAndClose();
  void close();
  void userSetCustomNameOrColor();

protected:
  /// The settings key used to specify whether standard terminologies are used for name column.
  std::function<bool()> UseTerminologySelectorCallback;
  std::function<bool()> UserSetCustomNameOrColorCallback;

  /// Flag indicating whether the delegate is set on a column that shows the color as decoration role.
  /// E.g. the name column in Segment Editor does not show decoration, but the color column in Subject Hierarchy does.
  bool UseDecorationRole{ true };
};

#endif
