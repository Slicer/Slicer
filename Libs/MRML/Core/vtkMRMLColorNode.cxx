/*=auto=========================================================================

Portions (c) Copyright 2005 Brigham and Women's Hospital (BWH) All Rights Reserved.

See COPYRIGHT.txt
or http://www.slicer.org/copyright/copyright.txt for details.

Program:   3D Slicer
Module:    $RCSfile: vtkMRMLColorNode.cxx,v $
Date:      $Date: 2006/03/03 22:26:39 $
Version:   $Revision: 1.0 $

=========================================================================auto=*/

// MRML includes
#include <vtkCodedEntry.h>
#include "vtkMRMLColorNode.h"
#include "vtkMRMLScene.h"
#include "vtkMRMLStorageNode.h"

// VTK includes
#include <vtkLookupTable.h>
#include <vtkObjectFactory.h>
#include <vtkSmartPointer.h>

// STD includes
#include <cassert>
#include <sstream>
#include <algorithm>

//----------------------------------------------------------------------------
vtkMRMLColorNode::vtkMRMLColorNode()
{
  this->FileName = nullptr; //TODO: Remove member
  this->Type = -1;
  this->HideFromEditors = 1;

  this->NoName = nullptr;
  this->SetNoName("(none)");
}

//----------------------------------------------------------------------------
vtkMRMLColorNode::~vtkMRMLColorNode()
{
  if (this->FileName)
  {
    delete [] this->FileName;
    this->FileName = nullptr;
  }

  if (this->NoName)
  {
    delete [] this->NoName;
    this->NoName = nullptr;
  }
}

//----------------------------------------------------------------------------
void vtkMRMLColorNode::WriteXML(ostream& of, int nIndent)
{
  // Write all attributes not equal to their defaults

  Superclass::WriteXML(of, nIndent);

  of << " type=\"" << this->GetType() << "\"";

  if (this->FileName != nullptr)
  {
    // don't write it out, it's handled by the storage node
  }
}

//----------------------------------------------------------------------------
void vtkMRMLColorNode::ReadXMLAttributes(const char** atts)
{
  int disabledModify = this->StartModify();

  Superclass::ReadXMLAttributes(atts);

  const char* attName;
  const char* attValue;
  while (*atts != nullptr)
  {
    attName = *(atts++);
    attValue = *(atts++);
    if (!strcmp(attName, "name"))
    {
      this->SetName(attValue);
    }
    else if (!strcmp(attName, "type"))
    {
      int type;
      std::stringstream ss;
      ss << attValue;
      ss >> type;
      this->SetType(type);
    }
    else if (!strcmp(attName, "filename"))
    {
      this->SetFileName(attValue);
      // don't read in the file with the colors, it's handled by the storage
      // node
      if (this->GetStorageNode() == nullptr)
      {
        vtkWarningMacro("A color node has a file name, but no storage node, trying to create one");
        this->AddDefaultStorageNode(attValue);
      }
    }
  }
  this->EndModify(disabledModify);
}

//----------------------------------------------------------------------------
vtkLookupTable * vtkMRMLColorNode::GetLookupTable()
{
  vtkDebugMacro("Subclass has not implemented GetLookupTable, returning NULL");
  return nullptr;
}

//----------------------------------------------------------------------------
vtkScalarsToColors * vtkMRMLColorNode::GetScalarsToColors()
{
  return this->GetLookupTable();
}

//----------------------------------------------------------------------------
// Copy the node's attributes to this object.
// Does NOT copy: ID, FilePrefix, Name, ID
void vtkMRMLColorNode::Copy(vtkMRMLNode *anode)
{
  int disabledModify = this->StartModify();

  Superclass::Copy(anode);
  vtkMRMLColorNode *node = (vtkMRMLColorNode *) anode;

  if (node->Type != -1)
  {
    // not using SetType, as that will basically recreate a new color node,
    // very slow
    this->Type = node->Type;
  }
  this->SetFileName(node->FileName);
  this->SetNoName(node->NoName);

  // copy names
  this->Properties = node->Properties;

  this->EndModify(disabledModify);

}

//----------------------------------------------------------------------------
void vtkMRMLColorNode::PrintSelf(ostream& os, vtkIndent indent)
{

  Superclass::PrintSelf(os,indent);

  os << indent << "Name: " <<
      (this->Name ? this->Name : "(none)") << "\n";


  os << indent << "Type: (" << this->GetTypeAsString() << ")\n";

  os << indent << "NoName = " <<
    (this->NoName ? this->NoName : "(not set)") <<  "\n";

  if (this->Properties.size() > 0)
  {
    os << indent << "Color properties:\n";
    for (unsigned int i = 0; i < this->Properties.size(); i++)
    {
      PropertyType& prop = this->Properties[i];
      if (!prop.Defined)
      {
        continue;
      }
      os << indent << indent << i << " ";
      os << this->GetColorName(i);
      if (prop.NameAutoGenerated)
      {
        os << " (auto-generated)";
      }
      double color[4];
      this->GetColor(i, color);
      os << " (" << color[0] << ", " << color[1] << ", " << color[2] << ", " << color[3] << ")";
      if (prop.Category)
      {
        os << " Category: " << prop.Category->GetAsPrintableString();
      }
      if (prop.Type)
      {
        os << " Type: " << prop.Type->GetAsPrintableString();
      }
      if (prop.TypeModifier)
      {
        os << " Type modifier: " << prop.TypeModifier->GetAsPrintableString();
      }
      if (prop.AnatomicRegion)
      {
        os << " Anatomic region: " << prop.AnatomicRegion->GetAsPrintableString();
      }
      if (prop.AnatomicRegionModifier)
      {
        os << " Anatomic region modifier: " << prop.AnatomicRegionModifier->GetAsPrintableString();
      }
      os << std::endl;
    }
  }
}

//-----------------------------------------------------------

void vtkMRMLColorNode::UpdateScene(vtkMRMLScene *scene)
{
    Superclass::UpdateScene(scene);
}

//---------------------------------------------------------------------------
void vtkMRMLColorNode::ProcessMRMLEvents ( vtkObject *caller,
                                           unsigned long event,
                                           void *callData )
{
  Superclass::ProcessMRMLEvents(caller, event, callData);
/*
  vtkMRMLColorDisplayNode *dnode = this->GetDisplayNode();
  if (dnode != nullptr && dnode == vtkMRMLColorDisplayNode::SafeDownCast(caller) &&
      event ==  vtkCommand::ModifiedEvent)
    {
        this->InvokeEvent(vtkMRMLColorNode::DisplayModifiedEvent, nullptr);
    }
*/
  return;
}

//---------------------------------------------------------------------------
const char * vtkMRMLColorNode::GetTypeAsString()
{
  if (this->Type == this->User)
  {
    return "UserDefined";
  }
  if (this->Type == this->File)
  {
    return "File";
  }
  return "(unknown)";
}

//---------------------------------------------------------------------------
void vtkMRMLColorNode::SetTypeToUser()
{
  this->SetType(this->User);
}

//---------------------------------------------------------------------------
void vtkMRMLColorNode::SetTypeToFile()
{
  this->SetType(this->File);
}

//---------------------------------------------------------------------------
void vtkMRMLColorNode::SetType(int type)
{
  if (this->Type == type)
  {
    vtkDebugMacro("SetType: type is already set to " << type);
    return;
  }

  this->Type = type;

  vtkDebugMacro(<< this->GetClassName() << " (" << this << "): setting Type to " << type);

  // subclass should over ride this and define colors according to the node
  // type

  // invoke a modified event
  this->Modified();

  // invoke a type  modified event
  this->InvokeEvent(vtkMRMLColorNode::TypeModifiedEvent);
}

//---------------------------------------------------------------------------
void vtkMRMLColorNode::SetNamesFromColors()
{
  const int numPoints = this->GetNumberOfColors();
  // reset the names
  this->Properties.resize(numPoints);

  for (int i = 0; i < numPoints; ++i)
  {
    this->SetNameFromColor(i);
  }
}

//---------------------------------------------------------------------------
bool vtkMRMLColorNode::SetNameFromColor(int index)
{
  double rgba[4] = {-1.,-1.,-1.,-1.};
  bool res = this->GetColor(index, rgba);
  std::stringstream ss;
  ss.precision(3);
  ss.setf(std::ios::fixed, std::ios::floatfield);
  ss << "R=" << rgba[0] << " G=" << rgba[1] << " B=" << rgba[2] << " A=" << rgba[3];
  vtkDebugMacro("SetNamesFromColors: " << index << " Name = " << ss.str().c_str());
  if (this->SetColorName(index, ss.str().c_str(), true) == 0)
  {
    vtkErrorMacro("SetNamesFromColors: Error setting color name " << index << " Name = " << ss.str().c_str());
    return false;
  }

  return res;
}

//---------------------------------------------------------------------------
bool vtkMRMLColorNode::HasNameFromColor(int index)
{
  PropertyType prop;
  if (!this->GetProperty(index, prop))
  {
    return false;
  }
  return prop.NameAutoGenerated;
}

//---------------------------------------------------------------------------
bool vtkMRMLColorNode::GetProperty(int ind, vtkMRMLColorNode::PropertyType& prop)
{
  if (ind < 0 || ind >= (int)this->Properties.size())
  {
    vtkDebugMacro("vtkMRMLColorNode::GetProperty: index " << ind << " is out of range 0 - " << this->Properties.size());
    return false;
  }
  prop = this->Properties[ind];
  return true;
}


//---------------------------------------------------------------------------
const char *vtkMRMLColorNode::GetColorName(int index)
{
  // Do not use GetProperty because the content of the locally copied property's std::string does not survive the return
  if (index < 0 || index >= (int)this->Properties.size())
  {
    vtkDebugMacro("vtkMRMLColorNode::GetColorName: index " << index << " is out of range 0 - " << this->Properties.size());
    return "invalid";
  }
  if (!this->Properties[index].Defined)
  {
    return this->NoName;
  }
  return this->Properties[index].Name.c_str();
}

//---------------------------------------------------------------------------
vtkCodedEntry* vtkMRMLColorNode::GetTerminologyCategory(int ind)
{
  PropertyType prop;
  if (!this->GetProperty(ind, prop))
  {
    return nullptr;
  }
  return prop.Category;
}

//---------------------------------------------------------------------------
vtkCodedEntry* vtkMRMLColorNode::GetTerminologyType(int ind)
{
  PropertyType prop;
  if (!this->GetProperty(ind, prop))
  {
    return nullptr;
  }
  return prop.Type;
}

//---------------------------------------------------------------------------
vtkCodedEntry* vtkMRMLColorNode::GetTerminologyTypeModifier(int ind)
{
  PropertyType prop;
  if (!this->GetProperty(ind, prop))
  {
    return nullptr;
  }
  return prop.TypeModifier;
}

//---------------------------------------------------------------------------
vtkCodedEntry* vtkMRMLColorNode::GetTerminologyAnatomicRegion(int ind)
{
  PropertyType prop;
  if (!this->GetProperty(ind, prop))
  {
    return nullptr;
  }
  return prop.AnatomicRegion;
}

//---------------------------------------------------------------------------
vtkCodedEntry* vtkMRMLColorNode::GetTerminologyAnatomicRegionModifier(int ind)
{
  PropertyType prop;
  if (!this->GetProperty(ind, prop))
  {
    return nullptr;
  }
  return prop.AnatomicRegionModifier;
}

//---------------------------------------------------------------------------
int vtkMRMLColorNode::GetColorIndexByName(const char *name)
{
  if (name == nullptr)
  {
    vtkErrorMacro("vtkMRMLColorNode::GetColorIndexByName: need a non-null name as argument");
    return -1;
  }

  std::string strName = name;
  for (int i = 0; i < this->GetNumberOfColors(); ++i)
  {
    if (strName == this->GetColorName(i))
    {
      return i;
    }
  }
  return -1;
}

//---------------------------------------------------------------------------
std::string vtkMRMLColorNode::GetColorNameWithoutSpaces(int ind, const char *subst)
{
  std::string name = std::string(this->GetColorName(ind));
  if (strstr(name.c_str(), " ") != nullptr)
  {
    std::string::size_type spaceIndex = name.find( " ", 0 );
    while (spaceIndex != std::string::npos)
    {
      name.replace(spaceIndex, 1, subst, 0, strlen(subst));
      spaceIndex = name.find(" ", spaceIndex);
    }
  }

  return name;
}

//---------------------------------------------------------------------------
std::string vtkMRMLColorNode::GetColorNameAsFileName(int colorIndex, const char *subst)
{
  std::string fileName(this->GetColorName(colorIndex));
  std::string validCharacters =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabscdefghijklmnopqrstuvwxyz"
    "0123456789"
    "-_.()$!~#'%^{}";
  std::string::size_type pos = 0;
  size_t substLength = strlen(subst);
  while ((pos = fileName.find_first_not_of(validCharacters, pos)) != std::string::npos)
  {
    fileName.replace(pos, 1, subst, substLength);
    pos += substLength;
    if (pos > 255)
    {
      break;
    }
  }
  // Truncate to 256 chars
  return fileName.substr(0, 256);
}

//---------------------------------------------------------------------------
int vtkMRMLColorNode::SetColorName(int ind, const char *name, bool autoGenerated/*=false*/)
{
  if (ind >= static_cast<int>(this->Properties.size()) || ind < 0)
  {
    vtkErrorMacro("ERROR: SetColorName, index was out of bounds: "<< ind << ", current size is "
      << this->Properties.size() << ", table name = " << (this->GetName() == nullptr ? "null" : this->GetName()));
    return 0;
  }
  std::string newName(name);
  PropertyType& prop = this->Properties[ind];
  if (prop.Name != newName)
  {
    prop.Name = newName;
    prop.NameAutoGenerated = autoGenerated;
    prop.Defined = true;
    this->StorableModifiedTime.Modified();
    this->Modified();
  }
  return 1;
}

//---------------------------------------------------------------------------
int vtkMRMLColorNode::SetColorNameWithSpaces(int ind, const char *name, const char *subst, bool autoGenerated/*=false*/)
{
  std::string nameString = std::string(name);
  std::string substString = std::string(subst);
   // does the input name have the subst character in it?
  if (strstr(name, substString.c_str()) != nullptr)
  {
    std::replace(nameString.begin(), nameString.end(), *subst, ' ');
    return this->SetColorName(ind, nameString.c_str(), autoGenerated);
  }
  else
  {
    // no substitutions necessary
    return this->SetColorName(ind, name, autoGenerated);
  }
}

//---------------------------------------------------------------------------
void vtkMRMLColorNode::Reset(vtkMRMLNode* vtkNotUsed(defaultNode))
{
  // don't need to call reset on color nodes, as all but the User color table
  // node are static, and that's taken care of in the vtkMRMLColorTableNode
  //Superclass::Reset(defaultNode);
}

//---------------------------------------------------------------------------
bool vtkMRMLColorNode::GetModifiedSinceRead()
{
  return this->Superclass::GetModifiedSinceRead() ||
    (this->GetScalarsToColors() &&
     this->GetScalarsToColors()->GetMTime() > this->GetStoredTime());
}

//---------------------------------------------------------------------------
vtkLookupTable* vtkMRMLColorNode::CreateLookupTableCopy()
{
  vtkLookupTable* copiedLut = vtkLookupTable::New();
  copiedLut->DeepCopy(this->GetLookupTable());

  // Workaround for VTK bug in vtkLookupTable::DeepCopy
  // (special colors are not copied)
  copiedLut->BuildSpecialColors();

  return copiedLut;
}
